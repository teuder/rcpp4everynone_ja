[
["index.html", "RcppのためのC++入門 はじめに 0.1 本書の構成", " RcppのためのC++入門 Masaki E. Tsuda 2017-03-26 はじめに このサイトは Rcpp を使うために最低限必要な C++ の知識を紹介することを目的としています。基本的にはC++11以降の標準にしたがって記述します。 Rcppのそのものの解説については Introduction to Rcpp（日本語） を参照してください。 0.1 本書の構成 このドキュメントの構成は以下のようになる予定です。 C++の概要 C++の特徴 _ C++の構成要素 変数 変数の宣言 変数の型 基本型 ユーザー定義型 参照型 配列型（優先度低） ポインタ型（優先度低） 変数の初期化 修飾子 変数のスコープ 関数 関数の宣言と定義 引数 値渡し 参照渡し ポインタ渡し 関数の多重定義 関数テンプレート 制御文 for文 if文 switch文 列挙型 構造体とクラス メンバ変数 メンバ関数 静的メンバ変数・関数 コンストラクタ デストラクタ 継承 クラステンプレート データ構造とアルゴリズム（STL） データ構造 イテレータ アルゴリズム 名前空間 ヘッダファイルの書き方 複数ファイルにわけて書く方法 "],
["010_outline.html", "Chapter 1 C++の概要 1.1 C++の特徴 1.2 C++の基本的な構成要素", " Chapter 1 C++の概要 C++とはどのような言語なのでしょうか？ 1.1 C++の特徴 1.1.1 コンパイル言語 CやC++はコンパイル言語と呼ばれます。一方、RやPythonなどの言語はスクリプト言語と呼ばれています。その違いを述べる前に、簡単にプログラミング言語とは何なのかを説明すると、コンピューターは、ユーザーが作成したソースコードをそのまま実行することはできません。実行するにはソースコードをコンピューターが実行可能な機械語に変換する必要があります。人間が直接書くのが困難な機械語を、人間に理解しやすい構文で書けるように設計された言語がプログラミング言語です。 スクリプト言語はソースコードを１文ごとにインタープリター（RやPythonの本体）が機械語に変換しながら実行します。RやPythonのコンソールからコードを入力してリターンを押すたびに実行されるので、ユーザーからはソースコードが直接実行されているように見えます。スクリプト言語はユーザーがコードを記述し実行するまでの手間を簡単にすることを目的に設計されているので比較的お手軽に使える利点があります。しかし、実行速度の観点からはコンパイル言語には劣ります。それは、実行時に１文ずつ機械語に変換されるので、変換するための時間もかかりますし、機械語に変換するときの最適化も１文単位でしか行うという限界があるためです。 コンパイル言語はあらかじめソースコードの全体をコンパイラーにより機械語に変換して実行ファイルを作成します。そして実行したいときに、その実行ファイルを実行します。実行ファイルはアプリケーションの本体なのでRやPythonのインタープリタも実行ファイルです。コンパイル言語は実行する前にコンパイルしておかないといけないですし、ソースコードを変更するたびにこのパイルしなおす必要があるので、トライアンドエラーを行うのに手間がかかります。しかし、ソースコード全体をまとめて機械語に変換するため機械語に変換時の最適化はスクリプト言語よりも優れており実行速度に勝ります。ただ、コンパイルにも時間がかかるので、一度コンパイルしたコードを何度も使うような場面には向いていますが、一度しか実行しないような使い捨て作業には向いていません。 （ちなみに使ったことはないですがClingというC++のインタープリターもあるみたいです。） 1.1.2 静的型付け言語 1.1.3 C言語の機能を包含している C++はC言語の機能を（ほぼ）包含しているので、Cの構文で記述されたプログラムはC++としても動きます。Cの標準ライブラリもC++の標準ライブラリの中に含まれているので基本的にはそのまま利用できます。ただCの標準ライブラリをC++の流儀で使えるように多少変更も加えられています。例えば、Cの stdio.h をC++で利用する場合には cstdio をインクルードします（同様に math.h は cmath）。stdio.h も使えるのですが、C++では cstdio を利用することが推奨されています。その理由は、標準ライブラリにある関数の名前が、ユーザーが定義した関数や他のライブラリの関数の名前と衝突するのを避けるために cstdio では全ての関数が std 名前空間の中で定義されているためです。なので cstdio の中で定義されている printf() を利用したい場合にはC++では std::printf() と指定します。 たまにC++を使うにはまずCを覚えた方が良いのかという話を聞きますが、Cを覚える必要はありません。むしろ、C++の方がシンプルで高機能に記述できるケースが多いと感じています。それを知らずC言語の流儀で書いてしまうクセを回避するために、初めからC++を学ぶことをオススメします。 1.2 C++の基本的な構成要素 C++言語の基本的な構成要素は「変数（オブジェクト）」「関数」「制御文」だと思います。それぞれの基本を以下では説明します。 1.2.1 変数（オブジェクト） 変数は値を保持します。Rとは異なり C++ ではある変数を使うには、使う前に必ず変数を作成する（C++では変数を宣言すると言います）必要があります。さらに、Rとは異なる点は、C++では変数の型は、その変数を宣言するときに必ず決める必要があるということです。そして、その変数の作成後には型を変えることはできません。このような特徴をもつ言語を 静的型付言語 と言います。これによりコンパイラーはその変数の値を保持するために必要なメモリの量があらかじめわかるので、最適化を効率よく行うことができるようになります。 int x; x = 1; １行目 int x;：int 型の変数 x を宣言します（メモリの領域を確保する） ２行目 x = 1;：変数 x に値を代入します（そのメモリ領域に値を書き込む） C++では全ての文の末尾にセミコロン ; が必須です。 1.2.2 関数 関数には入力と出力があるものですが、C++では次のように書きます。例えば、int 型（整数スカラー）の変数 x を入力として、その値を２倍にして int 型として返す関数 timesTwo を定義するコードは以下のようになります。 int timesTwo(int x){ return 2 * x; } １行目 int timesTwo：timesTwo 関数の返り値の型が int であることを示します。 １行目 (int x)：この関数の入力（引数）x の型が int であることを示します。 ２行目 return 2 * x;：x を2倍した値を返しています。C++では（main関数ではない）普通の関数では return 文は必須です。また、全ての文の末尾にセミコロン ; が必須です。 （蛇足） C/C++の本を読むと必ず main 関数というのが出てきます。C/C++界では main 関数は特別な関数で、全てのアプリケーションは main 関数を必ず１つ持っています。ユーザーがアプリケーションを実行するときには、CUIからコマンドを入力してリターンキーを押したり、GUIからアイコンをダブルクリックすることで、OSがアプリケーション本体の実行ファイルを起動します。実行ファイルが起動されると main 関数が呼び出され、main 関数の実行が終了するということはそのアプリケーションの実行が終了するということを意味します。 とはいえ、Rcppを使ってコードを書く際には、main関数を作成することはありません。なぜならmain関数はR側が持っているためです。Rcppの関数はRのmain関数から呼び出されるだけなのでmain関数が必要ないのです。順番としては、ユーザーがRを起動する → Rのmain関数が呼び出される → R内でのユーザーの入力に応じてRのその他の関数やRcppの関数が呼び出される → ユーザーがRを終了を指示する → Rのmain関数の実行が終了する、という感じです。 1.2.3 制御文 プログラミング言語の制御文には「条件分岐」と「繰り返し処理」があります。 条件分岐 C++ の条件分岐には次の３つの方法があります。 if文 switch 文 ifは条件が true か false かに応じて処理を２つに分岐するときにし使用するのに対して、switch は条件の値に応じて多重に分岐する場合に用います。 繰り返し処理 C++ の繰り返し処理には次の２つの方法があります。 for 文 while 文 do while 文 これらは基本的に同一の処理を実現しますが、処理に応じてどれを使えばシンプルにかけるかという観点から使い分けます。このドキュメントではもっともよく使われるであろう for 文のみを説明します。 1.2.4 標準ライブラリ 関数・変数・制御文はプログラミングのコアな構成要素です。しかし、実用的なプログラムを作成するには、例えばテキストを画面に表示したり、ファイルを読み書きしたり、ユーザーからの入力を受け付けたり、数学的な計算を行ったりと様々な機能が必要になります。そのためにC++ではそのような機能を標準ライブラリとして提供しています。ライブラリとは特定の機能を提供するモジュールです。「標準」ライブラリとはRで例えるならデフォルトでRと一緒にインストールされるパッケージ（statパッケージなど）のようなものです。 標準ライブラリについては以下のサイトなどを参考にしてください。 C++日本語リファレンス C++は産業や学術などの分野でのメジャーなプログラミング言語となっているので標準ライブラリの他にも、準標準ライブラリの位置づけにある boost ライブラリを始め、フリーや商用の様々なライブラリが多数存在しています。 "],
["020-title2.html", "Chapter 2 変数 2.1 変数の宣言 2.2 変数の型", " Chapter 2 変数 2.1 変数の宣言 １章の変数のセクションで述べたようにC++では変数を使う前に必ず宣言しなければいけません。 2.2 変数の型 C++で利用できる基本的なスカラー値の型には以下があります。ベクトルなど複数のスカラー値が組み合わさったデータ構造についてはデータ構造とアルゴリズムのセクションを参照してください。 説明 型 値 論理値 bool true または false 文字 char ‘a’ ‘’ など英数記号文字（ASCII文字） 文字列 char* “abcd” などASCII文字の列 文字列 std::string “abcd” などASCII文字の列、 u8“あいうえお” などUTF8のマルチバイト文字列 符号つき整数 int -2147483648 ~ 2147483647 符号なし整数 unsigned int 0 ~ 4294967295 符号つき整数 long 符号なし整数 unsigned long 浮動小数点数（実数） float 倍精度浮動小数点数（実数） double be | be | be | left | right | center | aligned | aligned | aligned | C++では同じ整数でも複数の型が存在していますが、それらの違いは扱える値の範囲が異なる点です。広い範囲の値を扱うためにはより大きなメモリ容量が必要となるので、処理に必要な値の範囲に合わせて変数の型を適切に選択することでメモリを効率よく使うことができますし、処理速度も速くなることが期待されます。 しかし、R/Rcppの整数ベクトルの要素の値は int 型、実数ベクトルの要素の値は double 型であるので、その範囲外の値をRのベクトルに渡しても正しく扱うことはできません。 ちなみに、ある型が扱える値の範囲（型が使用するメモリ容量）は処理系（コンパイラの種類; gcc, clang, visual c++ など）により異なります。このドキュメントでは Rcpp が対応している gcc, clang における値の範囲で表記します。 整数型の値の範囲は climits ヘッダに、浮動小数点数型の値の範囲はcfloatヘッダに定義されています。 Rcpp でそれを簡単に確認するには、例えばRのコンソールに以下のように入力します。 &gt; Rcpp::evalCpp(&quot;INT_MAX&quot;) [1] 2147483647 &gt; Rcpp::evalCpp(&quot;DBL_MAX&quot;) [1] 1.797693e+308 "]
]
